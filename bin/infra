#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'logger'
require 'gooddata'
# require 'sfdc_tests'
require 'pathname'
require 'infra'
require 'downloader'
include GLI

program_desc 'Framework for running projects. It helps you with managing state and restarting steps when necessary'
version Infra::VERSION

desc 'Path to the directory with application'
arg_name 'path'
default_value nil
flag [:d,:directory]

desc 'Print project summary'
command :summary do |c|
  c.action do |global_options,options,args|
    GUI.summary
  end
end

desc 'Run project from beginning'
command :run do |c|

  c.action do |global_options,options,args|
    FileUtils::cd global_options[:directory] do
      APP.run
    end
  end
end

desc 'Run project from last checkpoint'
command :restart_from_last_checkpoint do |c|
  c.action do |global_options,options,args|
    APP.restart_from_last_checkpoint
  end
end

desc 'Show available steps'
command :available_steps do |c|
  c.action do |global_options,options,args|
    APP.sequence.each {|step| puts step}
  end
end

pre do |global,command,options,args|
  next true if command.nil?
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  app_file            = 'app'
  workspace_file      = 'workspace.prm'
  run_params_file     = 'run_params.json'
  params_file         = 'params.json'
  project_root        = global[:directory] ? Pathname.new(global[:directory]).expand_path : Pathname.new(Dir.pwd).expand_path
  global[:directory]  = project_root

  fail "You do not seem to be in a project directory. App definition #{app_file} is missing." unless File.exist?(project_root + app_file)

  params = JSON.parse(File.read(project_root + params_file))
  params.merge!({"PID" => File.read(project_root + 'pid').chomp})

  APP = Infra::App.new({
    :logger           => Logger.new(project_root + 'log' + 'run.log', 'daily'),
    :home_directory   => project_root,
    :run_params_file  => project_root + run_params_file,
    :workspace_file   => project_root + workspace_file,
    :params           => params
  })

  APP.instance_eval(File.read(project_root + app_file))
  APP.initialize_params
  APP.awake
  GUI = Infra::AppGUI.new(APP)
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  pp exception.backtrace
    # pp exception.inspect
    # puts exception.message.color(:red)
    # false
  # Error logic here
  # return false to skip default error handling
  # false
  true
end

exit GLI.run(ARGV)